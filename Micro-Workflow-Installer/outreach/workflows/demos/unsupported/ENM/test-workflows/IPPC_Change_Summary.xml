<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE entity PUBLIC "-//UC Berkeley//DTD MoML 1//EN" "http://ptolemy.eecs.berkeley.edu/xml/dtd/MoML_1.dtd">
<entity class="ptolemy.actor.TypedCompositeActor" name="IPPC_Change_Summary">
    <property class="ptolemy.kernel.attributes.VersionAttribute" name="_createdBy" value="6.1.devel">
    </property>
    <property class="ptolemy.vergil.kernel.attributes.TextAttribute" name="Annotation">
        <property class="ptolemy.data.expr.Parameter" name="textSize" value="12">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="bold" value="false">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="text" value="This workflow transforms future climate change data from the Intergovernmental &#10;Panel on Climate Change (IPCC) CGCM A2a model into a format that can be used &#10;by Environmental Niche Modeling (ENM) workflows. The workflow reads 6 datasets&#10;(radiation, maximum temperature, mean temperature, minimum temperature, &#10;precipitation, wind speed) from the Kepler EarthGrid, and transforms and stores &#10;the data as ASCII Grid files (*.asc). The minimum, maximum, or average values for&#10;each of the six climate variables are summarized seasonally and/or annually and &#10;are stored in the location specified by the workflow's OutputDir parameter &#10;(e.g., C:/IPCCLayers/Changes).&#10;&#10;Note: Each version of climate data released by the IPCC must be converted only &#10;once, as converted data is saved and can be reused for every ENM run.&#10;&#10;Dan Higgins - NCEAS&#10;April 2006">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:ecoinformatics.org:kepler.233.1">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[225.0, -60.0]">
        </property>
        <property class="ptolemy.vergil.basic.DocAttribute" name="DocAttribute">
        </property>
    </property>
    <property class="ptolemy.data.expr.Parameter" name="OutputDir" value="&quot;C:/IPCCLayers/Changes/&quot;">
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:ecoinformatics.org:kepler.218.1">
        </property>
        <property class="ptolemy.vergil.icon.ValueIcon" name="_icon">
            <property class="ptolemy.actor.gui.ColorAttribute" name="_color" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property class="ptolemy.kernel.util.SingletonConfigurableAttribute" name="_smallIconDescription">
            <configure>
          <svg>
            <text style="font-size:14; font-family:SansSerif; fill:blue" x="20" y="20">-P-</text>
          </svg>
        </configure>
        </property>
        <property class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory" name="_editorFactory">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[125.0, -85.0]">
        </property>
    </property>
    <property class="ptolemy.domains.sdf.kernel.SDFDirector" name="SDF Director">
        <property class="ptolemy.data.expr.Parameter" name="iterations" value="1">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="allowDisconnectedGraphs" value="true">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:ecoinformatics.org:kepler.300.1">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[-10.0, -90.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>Steve Neuendorffer</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The SDF Director is often used to oversee fairly simple, sequential workflows in which the director can determine the order of actor invocation from the workflow. Types of workflows that would run well under an SDF Director include processing and reformatting tabular data, converting one data type to another, and reading and plotting a series of data points. A workflow in which an image is read, processed (rotated, scaled, clipped, filtered, etc.), and then displayed, is also an example of a sequential workflow that requires a director simply to ensure that each actor fires in the proper order (i.e., that each actor executes only after it receives its required inputs).</p>

<p>The SDF Director is very efficient and will not tax system resources with overhead. However, this efficiency requires that certain conditions be met, namely that the data consumption and production rate of each actor in an SDF workflow be constant and declared. If an actor reads one piece of data and calculates and outputs a single result, it must always read and output a single token of data. This data rate cannot change during workflow execution and, in general, workflows that require dynamic scheduling and/or flow control cannot use this director. Additionally, the SDF Director has no understanding of passing time (at least by default), and actors that depend on a notion of time may not work as expected. For example, a TimedPlotter actor will plot all values at time zero when used in SDF. </p>

<p>By default, the SDF Director requires that all actors in its workflow be connected. Otherwise, the director cannot account for concurrency between disconnected workflow parts. Usually, a PN Director should be used for workflows that contain disconnected actors; however, the SDF Director's allowDisconnectedGraphs parameter may also be set to true. The SDF Director will then schedule each disconnected "island" independently. The director cannot infer the sequential relationship between disconnected actors (i.e., nothing forces the director to finish executing all actors on one island before firing actors on another). However, the order of execution within each island should be correct. Usually, disconnected graphs in an SDF model indicate an error.</p>
 
<p>Because SDF Directors schedule actors to fire only after they receive their inputs, workflows that require loops (feeding an actor's output back into its input port for further processing) can cause "deadlock" errors. The deadlock errors occur because the actor depends on its own output value as an initial input. To fix this problem, use a SampleDelay actor to generate and inject an initial input value into the workflow.</p>

<p>The SDF Director determines the order in which actors execute and how many times each actor needs to be fired to complete a single iteration of the workflow. This schedule is calculated BEFORE the director begins to iterate the workflow. Because the SDF Director calculates a schedule in advance, it is quite efficient. However, SDF workflows must be static. In other words, the same number of tokens must be consumed/produced at every iteration of the workflow. Workflows that require dynamic control structures, such as a BooleanSwitch actor that sends output on one of two ports depending on the value of a 'control', cannot be used with an SDF Director because the number of tokens on each output can change for each execution.</p>

<p>Unless otherwise specified, the SDF Director assumes that each actor consumes and produces exactly one token per channel on each firing. Actors that do not follow the one-token-per-channel firing convention (e.g., Repeat or Ramp) must declare the number of tokens they produce or consume via the appropriate parameters. </p>

<p>The number of times a workflow is iterated is controlled by the director's iterations parameter. By default, this parameter is set to "0". Note that "0" does not mean "no iterations." Rather, "0" means that the workflow will iterate forever. Values greater than zero specify the actual number of times the director should execute the entire workflow. A value of 1, meaning that the director will run the workflow once, is often the best setting when building an SDF workflow. </p>

<p>The amount of data processed by an SDF workflow is a function of both the number of times the workflow iterates and the value of the director's vectorizationFactor parameter. The vectorizationFactor is used to increase the efficiency of a workflow by increasing the number of times actors fire each time the workflow iterates. If the parameter is set to a positive integer (other than 1), the director will fire each actor the specified number of times more than normal. The default is 1, indicating that no vectorization should be performed. Keep in mind that changing the vectorizationFactor parameter changes the meaning of a nested SDF workflow and may cause deadlock in a workflow that uses it. </p>

<p>The SDF Director has several advanced parameters that are generally only relevant when an SDF workflow contains composite components. In most cases the period, timeResolution, synchronizeToRealTime, allowRateChanges, timeResolution, and constrainBufferSizes parameters can be left at their default values.</p>

<p>For more information about the SDF Director, see the Ptolemy documentation (http://ptolemy.eecs.berkeley.edu/papers/05/ptIIdesign3-domains/ptIIdesign3-domains.pdf).</p>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:allowDisconnectedGraphs">
<configure>Specify whether to allow disconnected actors in the workflow (by default, all actors are required to be connected). If disconnected actors are permitted, the SDF Director will schedule each disconnected 'island' independently. Nothing "forces" the director to finish executing all actors on one island before firing actors on another. However, the order of execution within each island should be correct. Usually, disconnected graphs in an SDF workflow indicate an error.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:allowRateChanges">
<configure>Specify whether dynamic rate changes are permitted or not. By default, rate changes are not permitted, and the director will perform a check to disallow such workflows. If the parameter is selected, then workflows that require rate parameters to be modified during execution are valid, and the SDF Director will dynamically compute a new schedule at runtime. This is an advanced parameter that can usually be left at its default value.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:timeResolution">
<configure>The time precision used by this director. All time values are rounded to the nearest multiple of this number. The value is a double that defaults to "1E-10" (which is 10-10). This is an advanced parameter that can usually be left at its default value.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:constrainBufferSizes">
<configure>Specify whether buffer sizes are fixed. By default, buffers are fixed, and attempts to write to the buffer that cause the buffer to exceed its scheduled size result in an error. This is an advanced parameter that can usually be left at its default value.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:iterations">
<configure>Specify the number of times a workflow is iterated. By default, this parameter is set to "0". Note that "0" does not mean "no iterations." Rather, "0" means that the workflow will iterate forever. Values greater than zero specify the actual number of times the director should execute the entire workflow. A value of 1, meaning that the director will run the workflow once, is often the best setting when building an SDF workflow. </configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:vectorizationFactor">
<configure>The vectorizationFactor is used to increase the efficiency of a workflow by increasing the number of times actors fire each time the workflow iterates. If the parameter is set to a positive integer (other than 1), the director will fire each actor the specified number of times more than normal. The default is 1, indicating that no vectorization should be performed. Keep in mind that changing the vectorizationFactor parameter changes the meaning of a nested SDF workflow and may cause deadlock in a workflow that uses it. </configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:synchronizeToRealTime">
<configure>Specify whether the execution should synchronize to real time or not. By default, the director does not synchronize to real time. If synchronize is selected, the director will only process the workflow when elapsed real time matches the product of the period parameter and the iteration count. Note: if the period parameter has a value of 0.0 (the default), then selecting this parameter has no effect. This is an advanced parameter that can usually be left at its default value.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:period">
<configure>The time period of each iteration. The value is a double that defaults to 0.0, which means that the director does not increment workflow time. If the value greater than 0.0, the actor will increment workflow time each time it fires. This is an advanced parameter that can usually be left at its default value. </configure>
</property>
</property>
</property>
    <property class="ptolemy.data.expr.Parameter" name="numCols" value="96">
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:ecoinformatics.org:kepler.218.1">
        </property>
        <property class="ptolemy.vergil.icon.ValueIcon" name="_icon">
            <property class="ptolemy.actor.gui.ColorAttribute" name="_color" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property class="ptolemy.kernel.util.SingletonConfigurableAttribute" name="_smallIconDescription">
            <configure>
          <svg>
            <text style="font-size:14; font-family:SansSerif; fill:blue" x="20" y="20">-P-</text>
          </svg>
        </configure>
        </property>
        <property class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory" name="_editorFactory">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[240.0, -110.0]">
        </property>
    </property>
    <property class="ptolemy.data.expr.Parameter" name="numRows" value="48">
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:ecoinformatics.org:kepler.218.1">
        </property>
        <property class="ptolemy.vergil.icon.ValueIcon" name="_icon">
            <property class="ptolemy.actor.gui.ColorAttribute" name="_color" value="{0.0, 0.0, 1.0, 1.0}">
            </property>
        </property>
        <property class="ptolemy.kernel.util.SingletonConfigurableAttribute" name="_smallIconDescription">
            <configure>
          <svg>
            <text style="font-size:14; font-family:SansSerif; fill:blue" x="20" y="20">-P-</text>
          </svg>
        </configure>
        </property>
        <property class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory" name="_editorFactory">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[125.0, -110.0]">
        </property>
    </property>
    <property class="ptolemy.actor.gui.WindowPropertiesAttribute" name="_windowProperties" value="{bounds={6, 4, 895, 791}, maximized=false}">
    </property>
    <property class="ptolemy.actor.gui.SizeAttribute" name="_vergilSize" value="[623, 661]">
    </property>
    <property class="ptolemy.data.expr.ExpertParameter" name="_vergilZoomFactor" value="0.8">
    </property>
    <property class="ptolemy.data.expr.ExpertParameter" name="_vergilCenter" value="{332.375, 285.125}">
    </property>
    <property class="ptolemy.kernel.util.SingletonAttribute" name="DocViewer">
<property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>Steve Neuendorffer and Edward A. Lee</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>The DocViewer attribute renders a clickable documentation icon on the Workflow canvas. Clicking the icon opens the workflow documentation window.</configure>
</property>
</property>        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:kepler-project.org:actor:467:1">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="class" value="ptolemy.kernel.util.SingletonAttribute">
            <property class="ptolemy.kernel.util.StringAttribute" name="id" value="urn:lsid:kepler-project.org:class:1184:1">
            </property>
        </property>
        <property class="org.kepler.sms.SemanticType" name="semanticType000" value="urn:lsid:localhost:onto:1:1#Parameter">
        </property>
        <property class="org.kepler.sms.SemanticType" name="semanticType111" value="urn:lsid:localhost:onto:2:1#WorkflowDocumentation">
        </property>
        <property class="ptolemy.vergil.basic.DocViewerFactory" name="viewer">
        </property>
        <property class="ptolemy.kernel.util.SingletonAttribute" name="_hideName">
        </property>
        <property class="ptolemy.vergil.toolbox.VisibleParameterEditorFactory" name="_editorFactory">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[85.0, -55.0]">
        </property>
    </property>
    <property class="ptolemy.vergil.basic.DocAttribute" name="DocAttribute">
        <property class="ptolemy.data.expr.StringParameter" name="description" value="&lt;p&gt;The IPCC_Base_Layers.xml workflow transforms future climate change data from the Intergovernmental &#10;Panel on Climate Change (IPCC) CGCM A2a model  into a format that can be used by Environmental Niche Modeling (ENM) workflows. &#10;The workflow reads 6 datasets &#10;(radiation, maximum temperature, mean temperature, minimum temperature, precipitation, and wind speed)&#10; from the Kepler EarthGrid, and transforms and stores the data as &#10;ASCII Grid files (*.asc). The minimum, maximum, or average values for &#10;each of the six climate variables are summarized seasonally &#10;and/or annually and are stored in the location specified by the &#10;workflow's OutputDir parameter (e.g., C:/IPCCLayers/Changes/).&lt;/p&gt;&#10;&#10;&lt;p&gt;&lt;b&gt;Note:&lt;/b&gt; Each version of climate data released by the IPCC must be converted only once, as converted data is saved and can be reused for every ENM run.&lt;/p&gt;&#10;&#10;&lt;p&gt;The climate data are accessed by EML2DataSource actors (e.g., &lt;i&gt;IPCC Climate Change Data:  CGCM1 A2a Model: 2020 Radiation&lt;/i&gt;), which are initially retrieved via a search from the Data tab. Dragging and dropping a returned data set to the Workflow canvas instantiates an EML2DataSource actor. Retrieved data are stored in the Kepler cache, and the cache file name is passed to the &lt;i&gt;ClimateChangeFileProcessor&lt;/i&gt; actor. To learn more about the data, right-click the &lt;i&gt;EML2DataSource&lt;/i&gt; actor and select &quot;Get Metadata&quot;. The metadata contains detailed information about the extent, resolution, and content of the dataset.&lt;/p&gt;&#10;&#10;&lt;p&gt;The &lt;i&gt;ClimateChangeFileProcessor&lt;/i&gt; actor summarizes the climate &#10;change data seasonally and/or annually, depending on the settings of &#10;its parameters. Data are output in ASCII Grid format (*.asc) and are &#10;stored in the location specified by the &lt;code&gt;baseOutputFileName&lt;/code&gt;&#10; parameter. The value of the &lt;code&gt;baseOutputFileName&lt;/code&gt; parameter&#10; references the directory specified by the workflow's &#10;&lt;code&gt;OutputDir&lt;/code&gt; parameter (&quot;C://IPCCLayers/Changes/&quot;) as well as an individual file name to use for each layer.  The &lt;code&gt;rowsParameter&lt;/code&gt; and &lt;code&gt;colsParameter&lt;/code&gt; reference workflow parameters (&lt;code&gt;numRows&lt;/code&gt; and &lt;code&gt;numCols&lt;/code&gt;) that specify the number of rows and columns in the output *.asc grid file (48 and 96, respectively).&lt;/p&gt;&#10;&#10;&lt;p&gt;Although the IPCC_Change_Summary.xml workflow converts future &#10;climate change data to *.asc files, the data are not compatible &#10;with historical climate data sets: the resolution, extent, &#10;and measurement standard must all be transformed to match the &#10;historical standards. &#10;See &quot;Ecological Niche Modeling in Kepler&quot; (http://cvs.ecoinformatics.org/cvs/cvsweb.cgi/kepler-docs/user/GuideToENM.doc) for more information about &#10;preparing future climate change data for use with ENM workflows.&lt;/p&gt;&#10;">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="author" value="Dan Higgins -- NCEAS">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="since" value="April 2006">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="OutputDir (parameter)" value="The directory in which processed climate change  files will  be stored. ">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="numCols (parameter)" value="The number of columns  in the generated *.asc climate change files.">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="numRows (parameter)" value="The number of rows   in the generated *.asc climate change files.">
        </property>
    </property>
    <property class="ptolemy.vergil.kernel.attributes.TextAttribute" name="Annotation2">
        <property class="ptolemy.data.expr.SingletonParameter" name="_hideName" value="true">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="_hideAllParameters" value="true">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="textSize" value="14">
        </property>
        <property class="ptolemy.actor.gui.ColorAttribute" name="textColor" value="{1.0,0.0,0.0,1.0}">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="fontFamily" value="SansSerif">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="bold" value="false">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="italic" value="false">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="text" value="NOTE: OutputDir MUST exist!">
            <property class="ptolemy.actor.gui.style.TextStyle" name="_style">
                <property class="ptolemy.data.expr.Parameter" name="height" value="20">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="80">
                </property>
            </property>
        </property>
<property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>Edward A. Lee</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>Use the Annotation attribute to annotate a workflow. Double-click the attribute to customize the content, font size, color, and basic formatting (bold and italics).</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fontFamily">
<configure>The font face. Select a font from the drop-down menu. The default is "SansSerif".</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:italic">
<configure>Select to indicate that the type should be italics. By default, type will not be italicized.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:bold">
<configure>Select to indicate that the type should be bold. By default, type will not be bold.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:textColor">
<configure>The font color. Specify a string representing an array of four elements: red, green, blue, and alpha, where alpha is transparency. The default is an opaque black, {0.0, 0.0, 0.0, 1.0}</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:textSize">
<configure>The font size. Select an integer from the drop-down menu or specify a new size by typing it directly into the value field.  The default is 14.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:text">
<configure>The text of the annotation.</configure>
</property>
</property>        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:kepler-project.org:actor:436:1">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="class" value="ptolemy.vergil.kernel.attributes.TextAttribute">
            <property class="ptolemy.kernel.util.StringAttribute" name="id" value="urn:lsid:kepler-project.org:class:1199:1">
            </property>
        </property>
        <property class="org.kepler.sms.SemanticType" name="semanticType00" value="urn:lsid:localhost:onto:1:1#DocumentationActor">
        </property>
        <property class="org.kepler.sms.SemanticType" name="semanticType11" value="urn:lsid:localhost:onto:2:1#WorkflowDocumentation">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[370.0, -100.0]">
        </property>
    </property>
    <entity class="org.ecoinformatics.seek.datasource.eml.eml2.Eml200DataSource" name="IPCC Climate Change Data:  CGCM1 A2a Model: 2020 Radiation">
        <property class="ptolemy.kernel.util.StringAttribute" name="schemaDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="schemaDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="sqlDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="sqlDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="selectedEntity" value="CCCma_A2a_DSWF_2020.dif">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="dataOutputFormat" value="As Cache File Name">
        </property>
        <property class="org.kepler.objectmanager.data.db.QBTableauFactory" name="_tableauFactory">
            <property class="ptolemy.kernel.util.StringAttribute" name="sqlName" value="sqlDef">
            </property>
            <property class="ptolemy.kernel.util.StringAttribute" name="schemaName" value="schemaDef">
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="recordid" value="dpennington.34.8">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="endpoint" value="http://ecogrid.ecoinformatics.org/knb/services/QueryService">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="namespace" value="eml://ecoinformatics.org/eml-2.0.0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[50.0, 225.0]">
        </property>
        <port class="ptolemy.actor.TypedIOPort" name="CacheLocalFileName">
            <property name="output"/>
        </port>
        <port class="ptolemy.actor.TypedIOPort" name="CacheResourceName">
            <property name="output"/>
        </port>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>matt jones, jing tao, chad</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The EML2Dataset actor provides access to a wide variety of data packages that have been described using EML (Ecological Metadata Language). The actor accesses an EML dataset and handles the mechanical issues involved in parsing metadata, downloading the dataset (if applicable), and emitting data to downstream actors.</p>

<p>Each data package contains an EML metadata description and one or more data entities (e.g., data tables, spatial raster images, spatial vector images). The EML metadata allows the described data to be easily ingested into Kepler and exposed for use in downstream components. The data packages can be accessed from the local file system or through any EcoGrid server that provides access to its collection of data objects. The supported data transfer protocols include http, ftp, file, ecogrid, and srb. </p>

<p>After parsing the EML metadata, the actor automatically reconfigures its exposed ports to provide one port for each attribute described by the first entity of the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document. To preview the data, right-click the actor icon and select Preview from the drop-down menu.</p>

<p>By default, the ports created by the EML2Dataset actor represent data fields, and one tuple of data (e.g., one database row) is emitted on these ports each time the actor fires. Alternatively, the actor can be configured so that the ports represent an array of field values ("AsColumnVector"), or so that the ports represent an entire table of data ("AsTable"). Data tables are formatted in comma-separated-value (CSV) format.</p>

<p>If more than one data entity is described in the EML metadata, then the output of the actor defaults to the first entity listed in the EML. To select the other entities, specify an entity with the Selected parameter, or use the Query Builder to describe the filter and join that should be used to produce the data output. To use the Query Builder, right-click the actor and select "Open Actor." Specify the fields to be output and any filtering constraints to be applied.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>Output ports are automatically configured to provide one port for each attribute in the first entity described in the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fileExtensionFilter">
<configure>A file extension used to limit the array of file names returned by the actor when the selected output type is "As UnCompressed File Name". This parameter is ignored for other output types.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataOutputFormat">
<configure>Specify which ports are created for the actor and what data is emitted on those ports during each fire cycle. For example, this field can be configured to produce one port for each column in a data table, or one port that emits the entire data table at once in CSV format. Specifically, the output format choices are:
<table>
<tr>
<td>As Field (the default)</td>
<td> The actor creates one output port for each field (i.e., column/attribute/variable) that is described in the EML metadata for the data package. The type of each port (e.g., string, int, double, etc.) matches the base type of the field. If a query statement has been used to subset the data, then only those fields selected in the query statement will be configured as ports. </td>
</tr>

<tr>
<td>As Table</td>
<td> The selected data will be output as a string that contains the entire entity data. The actor creates three output ports: DataTable - the data itself, Delimiter - delimiter to separate fields, and NumColumns - the number of fields in the table. </td>
</tr>

<tr>
<td>As Row</td>
<td>  One tuple of selected data is formatted as an array and output. The actor creates one output port (DataRow), and the data type is a record containing each of the individual data fields. </td>
</tr>

<tr>
<td>As Byte Array</td>
<td> Selected data will be output as an array of bytes. The actor creates two output ports: BinaryData - contains the raw data itself, and EndOfStream - indicates whether the end of data stream has been reached.</td>
</tr> 

<tr>
<td>As UnCompressed File Name</td>
<td> This format is only used when the data package is a compressed file (zip, tar, et al). The compressed archive file is uncompressed after it is downloaded. The actor creates one output port, which contains an array of the filenames of all of the uncompressed archive files. If a FileExtensionFilter is specified, then the array will only contain files that match the specified extension.</td>
</tr> 

<tr>
<td>As Cache File Name</td>
<td>   Kepler stores data files downloaded from remote sites into its cache system. This output format will send the local cache file path for the data package so that workflow designers can directly access the cache files. The actor creates two output ports: CacheLocalFileName (the local file path) and CacheResourceName (the EML data link. e.g., ecogrid://knb/tao.2.1).</td>
</tr> 

<tr>
<td>As Column Vector</td>
<td> This output format is similar to "As Field", except instead of sending out a single value on each port, the actor sends out an array of all of the data for each field. The type of each port is an array of the base type for the field.</td>
</tr>

<tr>
<td>As ColumnBased Record</td>
<td>  This output format sends all data on one port using a record structure that encapsulates the entire data entity. The record will contain one array for each data field, and the type of each array will be determined by the type of the field it represents.</td>
</tr>
</table>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:selectedEntity">
<configure>If this EML data package has multiple entities, the selectedEntity parameter specifies which entity should be output. When this parameter is unset (the default), data from the first entity described in an EML package is output. This parameter is only used if no query statement is specified, or if a query statement is used and the output format is one of "As Table", "As Byte Array", "As Uncompressed File Name", and "As Cache File Name". To specify a query statement, right-click the actor and select Open Actor.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:emlFilePath">
<configure>The file path of a local EML metadata file used to describe and access an EML data set.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataFilePath">
<configure>The path to a local data file described by EML (must be used in conjunction with a local EML file). The actor will retrieve the data and automatically configure its ports to output it.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:isLenient">
<configure>If this parameter is selected, "extra" columns of data (e.g., comments that people have entered on a line or something of that nature) that are not described in the metadata are ignored, allowing the workflow to execute. If the option is unchecked (the default), the workflow execution will halt until the discrepancy between the data and metadata is corrected.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:checkVersion">
<configure>Select this parameter to check the EarthGrid for updates to the data. If the actor finds a version of the data that is more recent than the cached data on your local system, the actor will prompt the user to either download the latest data and metadata or ignore the newer version. Note that different versions of the data can have vastly different structures (new columns, or even new tables of data might be included or removed). If this parameter is selected, users should be prepared to handle changes that might arise from differences in the data structure.</configure>
</property>

</property>
</entity>
    <entity class="org.ecoinformatics.seek.datasource.eml.eml2.Eml200DataSource" name="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Maximum Temperature">
        <property class="ptolemy.kernel.util.StringAttribute" name="schemaDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="schemaDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="sqlDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="sqlDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="selectedEntity" value="CCCma_A2a_TMAX_2020.dif">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="dataOutputFormat" value="As Cache File Name">
        </property>
        <property class="org.kepler.objectmanager.data.db.QBTableauFactory" name="_tableauFactory">
            <property class="ptolemy.kernel.util.StringAttribute" name="sqlName" value="sqlDef">
            </property>
            <property class="ptolemy.kernel.util.StringAttribute" name="schemaName" value="schemaDef">
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="recordid" value="dpennington.41.5">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="endpoint" value="http://ecogrid.ecoinformatics.org/knb/services/QueryService">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="namespace" value="eml://ecoinformatics.org/eml-2.0.0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[45.0, 355.0]">
        </property>
        <port class="ptolemy.actor.TypedIOPort" name="CacheLocalFileName">
            <property name="output"/>
        </port>
        <port class="ptolemy.actor.TypedIOPort" name="CacheResourceName">
            <property name="output"/>
        </port>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>matt jones, jing tao, chad</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The EML2Dataset actor provides access to a wide variety of data packages that have been described using EML (Ecological Metadata Language). The actor accesses an EML dataset and handles the mechanical issues involved in parsing metadata, downloading the dataset (if applicable), and emitting data to downstream actors.</p>

<p>Each data package contains an EML metadata description and one or more data entities (e.g., data tables, spatial raster images, spatial vector images). The EML metadata allows the described data to be easily ingested into Kepler and exposed for use in downstream components. The data packages can be accessed from the local file system or through any EcoGrid server that provides access to its collection of data objects. The supported data transfer protocols include http, ftp, file, ecogrid, and srb. </p>

<p>After parsing the EML metadata, the actor automatically reconfigures its exposed ports to provide one port for each attribute described by the first entity of the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document. To preview the data, right-click the actor icon and select Preview from the drop-down menu.</p>

<p>By default, the ports created by the EML2Dataset actor represent data fields, and one tuple of data (e.g., one database row) is emitted on these ports each time the actor fires. Alternatively, the actor can be configured so that the ports represent an array of field values ("AsColumnVector"), or so that the ports represent an entire table of data ("AsTable"). Data tables are formatted in comma-separated-value (CSV) format.</p>

<p>If more than one data entity is described in the EML metadata, then the output of the actor defaults to the first entity listed in the EML. To select the other entities, specify an entity with the Selected parameter, or use the Query Builder to describe the filter and join that should be used to produce the data output. To use the Query Builder, right-click the actor and select "Open Actor." Specify the fields to be output and any filtering constraints to be applied.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>Output ports are automatically configured to provide one port for each attribute in the first entity described in the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fileExtensionFilter">
<configure>A file extension used to limit the array of file names returned by the actor when the selected output type is "As UnCompressed File Name". This parameter is ignored for other output types.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataOutputFormat">
<configure>Specify which ports are created for the actor and what data is emitted on those ports during each fire cycle. For example, this field can be configured to produce one port for each column in a data table, or one port that emits the entire data table at once in CSV format. Specifically, the output format choices are:
<table>
<tr>
<td>As Field (the default)</td>
<td> The actor creates one output port for each field (i.e., column/attribute/variable) that is described in the EML metadata for the data package. The type of each port (e.g., string, int, double, etc.) matches the base type of the field. If a query statement has been used to subset the data, then only those fields selected in the query statement will be configured as ports. </td>
</tr>

<tr>
<td>As Table</td>
<td> The selected data will be output as a string that contains the entire entity data. The actor creates three output ports: DataTable - the data itself, Delimiter - delimiter to separate fields, and NumColumns - the number of fields in the table. </td>
</tr>

<tr>
<td>As Row</td>
<td>  One tuple of selected data is formatted as an array and output. The actor creates one output port (DataRow), and the data type is a record containing each of the individual data fields. </td>
</tr>

<tr>
<td>As Byte Array</td>
<td> Selected data will be output as an array of bytes. The actor creates two output ports: BinaryData - contains the raw data itself, and EndOfStream - indicates whether the end of data stream has been reached.</td>
</tr> 

<tr>
<td>As UnCompressed File Name</td>
<td> This format is only used when the data package is a compressed file (zip, tar, et al). The compressed archive file is uncompressed after it is downloaded. The actor creates one output port, which contains an array of the filenames of all of the uncompressed archive files. If a FileExtensionFilter is specified, then the array will only contain files that match the specified extension.</td>
</tr> 

<tr>
<td>As Cache File Name</td>
<td>   Kepler stores data files downloaded from remote sites into its cache system. This output format will send the local cache file path for the data package so that workflow designers can directly access the cache files. The actor creates two output ports: CacheLocalFileName (the local file path) and CacheResourceName (the EML data link. e.g., ecogrid://knb/tao.2.1).</td>
</tr> 

<tr>
<td>As Column Vector</td>
<td> This output format is similar to "As Field", except instead of sending out a single value on each port, the actor sends out an array of all of the data for each field. The type of each port is an array of the base type for the field.</td>
</tr>

<tr>
<td>As ColumnBased Record</td>
<td>  This output format sends all data on one port using a record structure that encapsulates the entire data entity. The record will contain one array for each data field, and the type of each array will be determined by the type of the field it represents.</td>
</tr>
</table>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:selectedEntity">
<configure>If this EML data package has multiple entities, the selectedEntity parameter specifies which entity should be output. When this parameter is unset (the default), data from the first entity described in an EML package is output. This parameter is only used if no query statement is specified, or if a query statement is used and the output format is one of "As Table", "As Byte Array", "As Uncompressed File Name", and "As Cache File Name". To specify a query statement, right-click the actor and select Open Actor.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:emlFilePath">
<configure>The file path of a local EML metadata file used to describe and access an EML data set.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataFilePath">
<configure>The path to a local data file described by EML (must be used in conjunction with a local EML file). The actor will retrieve the data and automatically configure its ports to output it.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:isLenient">
<configure>If this parameter is selected, "extra" columns of data (e.g., comments that people have entered on a line or something of that nature) that are not described in the metadata are ignored, allowing the workflow to execute. If the option is unchecked (the default), the workflow execution will halt until the discrepancy between the data and metadata is corrected.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:checkVersion">
<configure>Select this parameter to check the EarthGrid for updates to the data. If the actor finds a version of the data that is more recent than the cached data on your local system, the actor will prompt the user to either download the latest data and metadata or ignore the newer version. Note that different versions of the data can have vastly different structures (new columns, or even new tables of data might be included or removed). If this parameter is selected, users should be prepared to handle changes that might arise from differences in the data structure.</configure>
</property>

</property>
</entity>
    <entity class="org.ecoinformatics.seek.datasource.eml.eml2.Eml200DataSource" name="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Mean Temperature">
        <property class="ptolemy.kernel.util.StringAttribute" name="schemaDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="schemaDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="sqlDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="sqlDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="selectedEntity" value="CCCma_A2a_TMP_2020.dif">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="dataOutputFormat" value="As Cache File Name">
        </property>
        <property class="org.kepler.objectmanager.data.db.QBTableauFactory" name="_tableauFactory">
            <property class="ptolemy.kernel.util.StringAttribute" name="sqlName" value="sqlDef">
            </property>
            <property class="ptolemy.kernel.util.StringAttribute" name="schemaName" value="schemaDef">
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="recordid" value="dpennington.47.5">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="endpoint" value="http://ecogrid.ecoinformatics.org/knb/services/QueryService">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="namespace" value="eml://ecoinformatics.org/eml-2.0.0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[40.0, 465.0]">
        </property>
        <port class="ptolemy.actor.TypedIOPort" name="CacheLocalFileName">
            <property name="output"/>
        </port>
        <port class="ptolemy.actor.TypedIOPort" name="CacheResourceName">
            <property name="output"/>
        </port>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>matt jones, jing tao, chad</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The EML2Dataset actor provides access to a wide variety of data packages that have been described using EML (Ecological Metadata Language). The actor accesses an EML dataset and handles the mechanical issues involved in parsing metadata, downloading the dataset (if applicable), and emitting data to downstream actors.</p>

<p>Each data package contains an EML metadata description and one or more data entities (e.g., data tables, spatial raster images, spatial vector images). The EML metadata allows the described data to be easily ingested into Kepler and exposed for use in downstream components. The data packages can be accessed from the local file system or through any EcoGrid server that provides access to its collection of data objects. The supported data transfer protocols include http, ftp, file, ecogrid, and srb. </p>

<p>After parsing the EML metadata, the actor automatically reconfigures its exposed ports to provide one port for each attribute described by the first entity of the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document. To preview the data, right-click the actor icon and select Preview from the drop-down menu.</p>

<p>By default, the ports created by the EML2Dataset actor represent data fields, and one tuple of data (e.g., one database row) is emitted on these ports each time the actor fires. Alternatively, the actor can be configured so that the ports represent an array of field values ("AsColumnVector"), or so that the ports represent an entire table of data ("AsTable"). Data tables are formatted in comma-separated-value (CSV) format.</p>

<p>If more than one data entity is described in the EML metadata, then the output of the actor defaults to the first entity listed in the EML. To select the other entities, specify an entity with the Selected parameter, or use the Query Builder to describe the filter and join that should be used to produce the data output. To use the Query Builder, right-click the actor and select "Open Actor." Specify the fields to be output and any filtering constraints to be applied.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>Output ports are automatically configured to provide one port for each attribute in the first entity described in the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fileExtensionFilter">
<configure>A file extension used to limit the array of file names returned by the actor when the selected output type is "As UnCompressed File Name". This parameter is ignored for other output types.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataOutputFormat">
<configure>Specify which ports are created for the actor and what data is emitted on those ports during each fire cycle. For example, this field can be configured to produce one port for each column in a data table, or one port that emits the entire data table at once in CSV format. Specifically, the output format choices are:
<table>
<tr>
<td>As Field (the default)</td>
<td> The actor creates one output port for each field (i.e., column/attribute/variable) that is described in the EML metadata for the data package. The type of each port (e.g., string, int, double, etc.) matches the base type of the field. If a query statement has been used to subset the data, then only those fields selected in the query statement will be configured as ports. </td>
</tr>

<tr>
<td>As Table</td>
<td> The selected data will be output as a string that contains the entire entity data. The actor creates three output ports: DataTable - the data itself, Delimiter - delimiter to separate fields, and NumColumns - the number of fields in the table. </td>
</tr>

<tr>
<td>As Row</td>
<td>  One tuple of selected data is formatted as an array and output. The actor creates one output port (DataRow), and the data type is a record containing each of the individual data fields. </td>
</tr>

<tr>
<td>As Byte Array</td>
<td> Selected data will be output as an array of bytes. The actor creates two output ports: BinaryData - contains the raw data itself, and EndOfStream - indicates whether the end of data stream has been reached.</td>
</tr> 

<tr>
<td>As UnCompressed File Name</td>
<td> This format is only used when the data package is a compressed file (zip, tar, et al). The compressed archive file is uncompressed after it is downloaded. The actor creates one output port, which contains an array of the filenames of all of the uncompressed archive files. If a FileExtensionFilter is specified, then the array will only contain files that match the specified extension.</td>
</tr> 

<tr>
<td>As Cache File Name</td>
<td>   Kepler stores data files downloaded from remote sites into its cache system. This output format will send the local cache file path for the data package so that workflow designers can directly access the cache files. The actor creates two output ports: CacheLocalFileName (the local file path) and CacheResourceName (the EML data link. e.g., ecogrid://knb/tao.2.1).</td>
</tr> 

<tr>
<td>As Column Vector</td>
<td> This output format is similar to "As Field", except instead of sending out a single value on each port, the actor sends out an array of all of the data for each field. The type of each port is an array of the base type for the field.</td>
</tr>

<tr>
<td>As ColumnBased Record</td>
<td>  This output format sends all data on one port using a record structure that encapsulates the entire data entity. The record will contain one array for each data field, and the type of each array will be determined by the type of the field it represents.</td>
</tr>
</table>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:selectedEntity">
<configure>If this EML data package has multiple entities, the selectedEntity parameter specifies which entity should be output. When this parameter is unset (the default), data from the first entity described in an EML package is output. This parameter is only used if no query statement is specified, or if a query statement is used and the output format is one of "As Table", "As Byte Array", "As Uncompressed File Name", and "As Cache File Name". To specify a query statement, right-click the actor and select Open Actor.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:emlFilePath">
<configure>The file path of a local EML metadata file used to describe and access an EML data set.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataFilePath">
<configure>The path to a local data file described by EML (must be used in conjunction with a local EML file). The actor will retrieve the data and automatically configure its ports to output it.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:isLenient">
<configure>If this parameter is selected, "extra" columns of data (e.g., comments that people have entered on a line or something of that nature) that are not described in the metadata are ignored, allowing the workflow to execute. If the option is unchecked (the default), the workflow execution will halt until the discrepancy between the data and metadata is corrected.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:checkVersion">
<configure>Select this parameter to check the EarthGrid for updates to the data. If the actor finds a version of the data that is more recent than the cached data on your local system, the actor will prompt the user to either download the latest data and metadata or ignore the newer version. Note that different versions of the data can have vastly different structures (new columns, or even new tables of data might be included or removed). If this parameter is selected, users should be prepared to handle changes that might arise from differences in the data structure.</configure>
</property>

</property>
</entity>
    <entity class="org.ecoinformatics.seek.datasource.eml.eml2.Eml200DataSource" name="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Minimum Temperature">
        <property class="ptolemy.kernel.util.StringAttribute" name="schemaDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="schemaDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="sqlDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="sqlDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="selectedEntity" value="CCCma_A2a_TMIN_2020.dif">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="dataOutputFormat" value="As Cache File Name">
        </property>
        <property class="org.kepler.objectmanager.data.db.QBTableauFactory" name="_tableauFactory">
            <property class="ptolemy.kernel.util.StringAttribute" name="sqlName" value="sqlDef">
            </property>
            <property class="ptolemy.kernel.util.StringAttribute" name="schemaName" value="schemaDef">
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="recordid" value="dpennington.42.5">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="endpoint" value="http://ecogrid.ecoinformatics.org/knb/services/QueryService">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="namespace" value="eml://ecoinformatics.org/eml-2.0.0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[45.0, 575.0]">
        </property>
        <port class="ptolemy.actor.TypedIOPort" name="CacheLocalFileName">
            <property name="output"/>
        </port>
        <port class="ptolemy.actor.TypedIOPort" name="CacheResourceName">
            <property name="output"/>
        </port>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>matt jones, jing tao, chad</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The EML2Dataset actor provides access to a wide variety of data packages that have been described using EML (Ecological Metadata Language). The actor accesses an EML dataset and handles the mechanical issues involved in parsing metadata, downloading the dataset (if applicable), and emitting data to downstream actors.</p>

<p>Each data package contains an EML metadata description and one or more data entities (e.g., data tables, spatial raster images, spatial vector images). The EML metadata allows the described data to be easily ingested into Kepler and exposed for use in downstream components. The data packages can be accessed from the local file system or through any EcoGrid server that provides access to its collection of data objects. The supported data transfer protocols include http, ftp, file, ecogrid, and srb. </p>

<p>After parsing the EML metadata, the actor automatically reconfigures its exposed ports to provide one port for each attribute described by the first entity of the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document. To preview the data, right-click the actor icon and select Preview from the drop-down menu.</p>

<p>By default, the ports created by the EML2Dataset actor represent data fields, and one tuple of data (e.g., one database row) is emitted on these ports each time the actor fires. Alternatively, the actor can be configured so that the ports represent an array of field values ("AsColumnVector"), or so that the ports represent an entire table of data ("AsTable"). Data tables are formatted in comma-separated-value (CSV) format.</p>

<p>If more than one data entity is described in the EML metadata, then the output of the actor defaults to the first entity listed in the EML. To select the other entities, specify an entity with the Selected parameter, or use the Query Builder to describe the filter and join that should be used to produce the data output. To use the Query Builder, right-click the actor and select "Open Actor." Specify the fields to be output and any filtering constraints to be applied.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>Output ports are automatically configured to provide one port for each attribute in the first entity described in the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fileExtensionFilter">
<configure>A file extension used to limit the array of file names returned by the actor when the selected output type is "As UnCompressed File Name". This parameter is ignored for other output types.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataOutputFormat">
<configure>Specify which ports are created for the actor and what data is emitted on those ports during each fire cycle. For example, this field can be configured to produce one port for each column in a data table, or one port that emits the entire data table at once in CSV format. Specifically, the output format choices are:
<table>
<tr>
<td>As Field (the default)</td>
<td> The actor creates one output port for each field (i.e., column/attribute/variable) that is described in the EML metadata for the data package. The type of each port (e.g., string, int, double, etc.) matches the base type of the field. If a query statement has been used to subset the data, then only those fields selected in the query statement will be configured as ports. </td>
</tr>

<tr>
<td>As Table</td>
<td> The selected data will be output as a string that contains the entire entity data. The actor creates three output ports: DataTable - the data itself, Delimiter - delimiter to separate fields, and NumColumns - the number of fields in the table. </td>
</tr>

<tr>
<td>As Row</td>
<td>  One tuple of selected data is formatted as an array and output. The actor creates one output port (DataRow), and the data type is a record containing each of the individual data fields. </td>
</tr>

<tr>
<td>As Byte Array</td>
<td> Selected data will be output as an array of bytes. The actor creates two output ports: BinaryData - contains the raw data itself, and EndOfStream - indicates whether the end of data stream has been reached.</td>
</tr> 

<tr>
<td>As UnCompressed File Name</td>
<td> This format is only used when the data package is a compressed file (zip, tar, et al). The compressed archive file is uncompressed after it is downloaded. The actor creates one output port, which contains an array of the filenames of all of the uncompressed archive files. If a FileExtensionFilter is specified, then the array will only contain files that match the specified extension.</td>
</tr> 

<tr>
<td>As Cache File Name</td>
<td>   Kepler stores data files downloaded from remote sites into its cache system. This output format will send the local cache file path for the data package so that workflow designers can directly access the cache files. The actor creates two output ports: CacheLocalFileName (the local file path) and CacheResourceName (the EML data link. e.g., ecogrid://knb/tao.2.1).</td>
</tr> 

<tr>
<td>As Column Vector</td>
<td> This output format is similar to "As Field", except instead of sending out a single value on each port, the actor sends out an array of all of the data for each field. The type of each port is an array of the base type for the field.</td>
</tr>

<tr>
<td>As ColumnBased Record</td>
<td>  This output format sends all data on one port using a record structure that encapsulates the entire data entity. The record will contain one array for each data field, and the type of each array will be determined by the type of the field it represents.</td>
</tr>
</table>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:selectedEntity">
<configure>If this EML data package has multiple entities, the selectedEntity parameter specifies which entity should be output. When this parameter is unset (the default), data from the first entity described in an EML package is output. This parameter is only used if no query statement is specified, or if a query statement is used and the output format is one of "As Table", "As Byte Array", "As Uncompressed File Name", and "As Cache File Name". To specify a query statement, right-click the actor and select Open Actor.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:emlFilePath">
<configure>The file path of a local EML metadata file used to describe and access an EML data set.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataFilePath">
<configure>The path to a local data file described by EML (must be used in conjunction with a local EML file). The actor will retrieve the data and automatically configure its ports to output it.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:isLenient">
<configure>If this parameter is selected, "extra" columns of data (e.g., comments that people have entered on a line or something of that nature) that are not described in the metadata are ignored, allowing the workflow to execute. If the option is unchecked (the default), the workflow execution will halt until the discrepancy between the data and metadata is corrected.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:checkVersion">
<configure>Select this parameter to check the EarthGrid for updates to the data. If the actor finds a version of the data that is more recent than the cached data on your local system, the actor will prompt the user to either download the latest data and metadata or ignore the newer version. Note that different versions of the data can have vastly different structures (new columns, or even new tables of data might be included or removed). If this parameter is selected, users should be prepared to handle changes that might arise from differences in the data structure.</configure>
</property>

</property>
</entity>
    <entity class="org.ecoinformatics.seek.datasource.eml.eml2.Eml200DataSource" name="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Precipitation">
        <property class="ptolemy.kernel.util.StringAttribute" name="schemaDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="schemaDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="sqlDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="sqlDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="selectedEntity" value="CCCma_A2a_PREC_2020.dif">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="dataOutputFormat" value="As Cache File Name">
        </property>
        <property class="org.kepler.objectmanager.data.db.QBTableauFactory" name="_tableauFactory">
            <property class="ptolemy.kernel.util.StringAttribute" name="sqlName" value="sqlDef">
            </property>
            <property class="ptolemy.kernel.util.StringAttribute" name="schemaName" value="schemaDef">
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="recordid" value="dpennington.33.10">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="endpoint" value="http://ecogrid.ecoinformatics.org/knb/services/QueryService">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="namespace" value="eml://ecoinformatics.org/eml-2.0.0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[45.0, 710.0]">
        </property>
        <port class="ptolemy.actor.TypedIOPort" name="CacheLocalFileName">
            <property name="output"/>
        </port>
        <port class="ptolemy.actor.TypedIOPort" name="CacheResourceName">
            <property name="output"/>
        </port>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>matt jones, jing tao, chad</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The EML2Dataset actor provides access to a wide variety of data packages that have been described using EML (Ecological Metadata Language). The actor accesses an EML dataset and handles the mechanical issues involved in parsing metadata, downloading the dataset (if applicable), and emitting data to downstream actors.</p>

<p>Each data package contains an EML metadata description and one or more data entities (e.g., data tables, spatial raster images, spatial vector images). The EML metadata allows the described data to be easily ingested into Kepler and exposed for use in downstream components. The data packages can be accessed from the local file system or through any EcoGrid server that provides access to its collection of data objects. The supported data transfer protocols include http, ftp, file, ecogrid, and srb. </p>

<p>After parsing the EML metadata, the actor automatically reconfigures its exposed ports to provide one port for each attribute described by the first entity of the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document. To preview the data, right-click the actor icon and select Preview from the drop-down menu.</p>

<p>By default, the ports created by the EML2Dataset actor represent data fields, and one tuple of data (e.g., one database row) is emitted on these ports each time the actor fires. Alternatively, the actor can be configured so that the ports represent an array of field values ("AsColumnVector"), or so that the ports represent an entire table of data ("AsTable"). Data tables are formatted in comma-separated-value (CSV) format.</p>

<p>If more than one data entity is described in the EML metadata, then the output of the actor defaults to the first entity listed in the EML. To select the other entities, specify an entity with the Selected parameter, or use the Query Builder to describe the filter and join that should be used to produce the data output. To use the Query Builder, right-click the actor and select "Open Actor." Specify the fields to be output and any filtering constraints to be applied.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>Output ports are automatically configured to provide one port for each attribute in the first entity described in the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fileExtensionFilter">
<configure>A file extension used to limit the array of file names returned by the actor when the selected output type is "As UnCompressed File Name". This parameter is ignored for other output types.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataOutputFormat">
<configure>Specify which ports are created for the actor and what data is emitted on those ports during each fire cycle. For example, this field can be configured to produce one port for each column in a data table, or one port that emits the entire data table at once in CSV format. Specifically, the output format choices are:
<table>
<tr>
<td>As Field (the default)</td>
<td> The actor creates one output port for each field (i.e., column/attribute/variable) that is described in the EML metadata for the data package. The type of each port (e.g., string, int, double, etc.) matches the base type of the field. If a query statement has been used to subset the data, then only those fields selected in the query statement will be configured as ports. </td>
</tr>

<tr>
<td>As Table</td>
<td> The selected data will be output as a string that contains the entire entity data. The actor creates three output ports: DataTable - the data itself, Delimiter - delimiter to separate fields, and NumColumns - the number of fields in the table. </td>
</tr>

<tr>
<td>As Row</td>
<td>  One tuple of selected data is formatted as an array and output. The actor creates one output port (DataRow), and the data type is a record containing each of the individual data fields. </td>
</tr>

<tr>
<td>As Byte Array</td>
<td> Selected data will be output as an array of bytes. The actor creates two output ports: BinaryData - contains the raw data itself, and EndOfStream - indicates whether the end of data stream has been reached.</td>
</tr> 

<tr>
<td>As UnCompressed File Name</td>
<td> This format is only used when the data package is a compressed file (zip, tar, et al). The compressed archive file is uncompressed after it is downloaded. The actor creates one output port, which contains an array of the filenames of all of the uncompressed archive files. If a FileExtensionFilter is specified, then the array will only contain files that match the specified extension.</td>
</tr> 

<tr>
<td>As Cache File Name</td>
<td>   Kepler stores data files downloaded from remote sites into its cache system. This output format will send the local cache file path for the data package so that workflow designers can directly access the cache files. The actor creates two output ports: CacheLocalFileName (the local file path) and CacheResourceName (the EML data link. e.g., ecogrid://knb/tao.2.1).</td>
</tr> 

<tr>
<td>As Column Vector</td>
<td> This output format is similar to "As Field", except instead of sending out a single value on each port, the actor sends out an array of all of the data for each field. The type of each port is an array of the base type for the field.</td>
</tr>

<tr>
<td>As ColumnBased Record</td>
<td>  This output format sends all data on one port using a record structure that encapsulates the entire data entity. The record will contain one array for each data field, and the type of each array will be determined by the type of the field it represents.</td>
</tr>
</table>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:selectedEntity">
<configure>If this EML data package has multiple entities, the selectedEntity parameter specifies which entity should be output. When this parameter is unset (the default), data from the first entity described in an EML package is output. This parameter is only used if no query statement is specified, or if a query statement is used and the output format is one of "As Table", "As Byte Array", "As Uncompressed File Name", and "As Cache File Name". To specify a query statement, right-click the actor and select Open Actor.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:emlFilePath">
<configure>The file path of a local EML metadata file used to describe and access an EML data set.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataFilePath">
<configure>The path to a local data file described by EML (must be used in conjunction with a local EML file). The actor will retrieve the data and automatically configure its ports to output it.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:isLenient">
<configure>If this parameter is selected, "extra" columns of data (e.g., comments that people have entered on a line or something of that nature) that are not described in the metadata are ignored, allowing the workflow to execute. If the option is unchecked (the default), the workflow execution will halt until the discrepancy between the data and metadata is corrected.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:checkVersion">
<configure>Select this parameter to check the EarthGrid for updates to the data. If the actor finds a version of the data that is more recent than the cached data on your local system, the actor will prompt the user to either download the latest data and metadata or ignore the newer version. Note that different versions of the data can have vastly different structures (new columns, or even new tables of data might be included or removed). If this parameter is selected, users should be prepared to handle changes that might arise from differences in the data structure.</configure>
</property>

</property>
</entity>
    <entity class="org.ecoinformatics.seek.datasource.eml.eml2.Eml200DataSource" name="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Wind Speed">
        <property class="ptolemy.kernel.util.StringAttribute" name="schemaDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="schemaDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="sqlDef">
            <property class="ptolemy.actor.gui.style.TextStyle" name="sqlDef">
                <property class="ptolemy.data.expr.Parameter" name="height" value="10">
                </property>
                <property class="ptolemy.data.expr.Parameter" name="width" value="30">
                </property>
            </property>
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="selectedEntity" value="CCCma_A2a_WIND_2020.dif">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="dataOutputFormat" value="As Cache File Name">
        </property>
        <property class="org.kepler.objectmanager.data.db.QBTableauFactory" name="_tableauFactory">
            <property class="ptolemy.kernel.util.StringAttribute" name="sqlName" value="sqlDef">
            </property>
            <property class="ptolemy.kernel.util.StringAttribute" name="schemaName" value="schemaDef">
            </property>
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="recordid" value="dpennington.48.5">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="endpoint" value="http://ecogrid.ecoinformatics.org/knb/services/QueryService">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="namespace" value="eml://ecoinformatics.org/eml-2.0.0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[40.0, 820.0]">
        </property>
        <port class="ptolemy.actor.TypedIOPort" name="CacheLocalFileName">
            <property name="output"/>
        </port>
        <port class="ptolemy.actor.TypedIOPort" name="CacheResourceName">
            <property name="output"/>
        </port>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>matt jones, jing tao, chad</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The EML2Dataset actor provides access to a wide variety of data packages that have been described using EML (Ecological Metadata Language). The actor accesses an EML dataset and handles the mechanical issues involved in parsing metadata, downloading the dataset (if applicable), and emitting data to downstream actors.</p>

<p>Each data package contains an EML metadata description and one or more data entities (e.g., data tables, spatial raster images, spatial vector images). The EML metadata allows the described data to be easily ingested into Kepler and exposed for use in downstream components. The data packages can be accessed from the local file system or through any EcoGrid server that provides access to its collection of data objects. The supported data transfer protocols include http, ftp, file, ecogrid, and srb. </p>

<p>After parsing the EML metadata, the actor automatically reconfigures its exposed ports to provide one port for each attribute described by the first entity of the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document. To preview the data, right-click the actor icon and select Preview from the drop-down menu.</p>

<p>By default, the ports created by the EML2Dataset actor represent data fields, and one tuple of data (e.g., one database row) is emitted on these ports each time the actor fires. Alternatively, the actor can be configured so that the ports represent an array of field values ("AsColumnVector"), or so that the ports represent an entire table of data ("AsTable"). Data tables are formatted in comma-separated-value (CSV) format.</p>

<p>If more than one data entity is described in the EML metadata, then the output of the actor defaults to the first entity listed in the EML. To select the other entities, specify an entity with the Selected parameter, or use the Query Builder to describe the filter and join that should be used to produce the data output. To use the Query Builder, right-click the actor and select "Open Actor." Specify the fields to be output and any filtering constraints to be applied.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>Output ports are automatically configured to provide one port for each attribute in the first entity described in the EML description. For example, if the first entity is a data table with four columns, the ports might be "Site", "Date", "Plot", and "Rainfall." These details are obtained from the EML document.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:fileExtensionFilter">
<configure>A file extension used to limit the array of file names returned by the actor when the selected output type is "As UnCompressed File Name". This parameter is ignored for other output types.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataOutputFormat">
<configure>Specify which ports are created for the actor and what data is emitted on those ports during each fire cycle. For example, this field can be configured to produce one port for each column in a data table, or one port that emits the entire data table at once in CSV format. Specifically, the output format choices are:
<table>
<tr>
<td>As Field (the default)</td>
<td> The actor creates one output port for each field (i.e., column/attribute/variable) that is described in the EML metadata for the data package. The type of each port (e.g., string, int, double, etc.) matches the base type of the field. If a query statement has been used to subset the data, then only those fields selected in the query statement will be configured as ports. </td>
</tr>

<tr>
<td>As Table</td>
<td> The selected data will be output as a string that contains the entire entity data. The actor creates three output ports: DataTable - the data itself, Delimiter - delimiter to separate fields, and NumColumns - the number of fields in the table. </td>
</tr>

<tr>
<td>As Row</td>
<td>  One tuple of selected data is formatted as an array and output. The actor creates one output port (DataRow), and the data type is a record containing each of the individual data fields. </td>
</tr>

<tr>
<td>As Byte Array</td>
<td> Selected data will be output as an array of bytes. The actor creates two output ports: BinaryData - contains the raw data itself, and EndOfStream - indicates whether the end of data stream has been reached.</td>
</tr> 

<tr>
<td>As UnCompressed File Name</td>
<td> This format is only used when the data package is a compressed file (zip, tar, et al). The compressed archive file is uncompressed after it is downloaded. The actor creates one output port, which contains an array of the filenames of all of the uncompressed archive files. If a FileExtensionFilter is specified, then the array will only contain files that match the specified extension.</td>
</tr> 

<tr>
<td>As Cache File Name</td>
<td>   Kepler stores data files downloaded from remote sites into its cache system. This output format will send the local cache file path for the data package so that workflow designers can directly access the cache files. The actor creates two output ports: CacheLocalFileName (the local file path) and CacheResourceName (the EML data link. e.g., ecogrid://knb/tao.2.1).</td>
</tr> 

<tr>
<td>As Column Vector</td>
<td> This output format is similar to "As Field", except instead of sending out a single value on each port, the actor sends out an array of all of the data for each field. The type of each port is an array of the base type for the field.</td>
</tr>

<tr>
<td>As ColumnBased Record</td>
<td>  This output format sends all data on one port using a record structure that encapsulates the entire data entity. The record will contain one array for each data field, and the type of each array will be determined by the type of the field it represents.</td>
</tr>
</table>

</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:selectedEntity">
<configure>If this EML data package has multiple entities, the selectedEntity parameter specifies which entity should be output. When this parameter is unset (the default), data from the first entity described in an EML package is output. This parameter is only used if no query statement is specified, or if a query statement is used and the output format is one of "As Table", "As Byte Array", "As Uncompressed File Name", and "As Cache File Name". To specify a query statement, right-click the actor and select Open Actor.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:emlFilePath">
<configure>The file path of a local EML metadata file used to describe and access an EML data set.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:dataFilePath">
<configure>The path to a local data file described by EML (must be used in conjunction with a local EML file). The actor will retrieve the data and automatically configure its ports to output it.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:isLenient">
<configure>If this parameter is selected, "extra" columns of data (e.g., comments that people have entered on a line or something of that nature) that are not described in the metadata are ignored, allowing the workflow to execute. If the option is unchecked (the default), the workflow execution will halt until the discrepancy between the data and metadata is corrected.</configure>
</property>

<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:checkVersion">
<configure>Select this parameter to check the EarthGrid for updates to the data. If the actor finds a version of the data that is more recent than the cached data on your local system, the actor will prompt the user to either download the latest data and metadata or ignore the newer version. Note that different versions of the data can have vastly different structures (new columns, or even new tables of data might be included or removed). If this parameter is selected, users should be prepared to handle changes that might arise from differences in the data structure.</configure>
</property>

</property>
</entity>
    <entity class="util.ClimateChangeFileProcessor" name="ClimateChangeFileProcessor">
        <property class="ptolemy.data.expr.StringParameter" name="outputType" value="average">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="outputPeriod" value="annual">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="rowsParameter" value="numRows">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="colsParameter" value="numCols">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="nodatavalueParameter" value="9999">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="baseOutputFileName" value="OutputDir+&quot;/CGCM1_A2a Model_2020 Radiation&quot;">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:localhost:local:LOCALID0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[145.0, 225.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>dan higgins</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The ClimateChangeFileProcessor actor converts climate change data from the Intergovernmental Panel on Climate Change (IPCC) into a more generalized raster format that can be read by other actors. The actor outputs the name of the converted file.</p>

<p>The ClimateChangeFileProcessor actor is very similar to the ClimateFileProcessor actor, except that it is designed to work with predicted climate change datasets, which differ from historical (1961-1990) IPCC datasets in formatting. For more information about IPCC, see http://www.ipcc.ch/.</p>

<p>The ClimateChangeFileProcessor actor receives the name of an IPCC climate change data file via its input port and saves the reformatted file in the same directory. Specify another location using the baseOutputFileName parameter.</p>

<p>Customize the type of climate change data to output (minimum, maximum, or average climate change values) with the outputType parameter. Specify the output period for the data (the season or year) with the outputPeriod parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>An output port that broadcasts the file name of the raster file created by the actor. The actor creates this file from the IPCC source data, based on the time and type values specified by the user.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:input">
<configure>An input port that accepts the file name of the source IPCC climate change dataset. IPCC data can be located via the EcoGrid.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:nodatavalueParameter">
<configure>The value used to indicate missing data.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputPeriod">
<configure>The time period to output: annual, fall, winter, summer, or spring.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:colsParameter">
<configure>The number of columns in the data file. The number of columns is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:rowsParameter">
<configure>The number of rows in the data file. The number of rows is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:baseOutputFileName">
<configure>The base file path for the raster file, which the actor creates and saves. If no path is specified, the file is placed in the same directory as the source IPCC file. In either case, the actor appends text indicating the type and time period of the data to the file name.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputType">
<configure>The type of climate change data to output: minimum, maximum, or average climate change values. The selected type will be output for the selected time period, which is specified with the outputPeriod parameter.</configure>
</property>
</property>
</entity>
    <entity class="util.ClimateChangeFileProcessor" name="ClimateChangeFileProcessor2">
        <property class="ptolemy.data.expr.StringParameter" name="outputType" value="average">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="outputPeriod" value="annual">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="rowsParameter" value="numRows">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="colsParameter" value="numCols">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="nodatavalueParameter" value="9999">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="baseOutputFileName" value="OutputDir+&quot;/CGCM1_A2a Model_ 2020 Maximum_Temperature&quot;">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:localhost:local:LOCALID0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[135.0, 355.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>dan higgins</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The ClimateChangeFileProcessor actor converts climate change data from the Intergovernmental Panel on Climate Change (IPCC) into a more generalized raster format that can be read by other actors. The actor outputs the name of the converted file.</p>

<p>The ClimateChangeFileProcessor actor is very similar to the ClimateFileProcessor actor, except that it is designed to work with predicted climate change datasets, which differ from historical (1961-1990) IPCC datasets in formatting. For more information about IPCC, see http://www.ipcc.ch/.</p>

<p>The ClimateChangeFileProcessor actor receives the name of an IPCC climate change data file via its input port and saves the reformatted file in the same directory. Specify another location using the baseOutputFileName parameter.</p>

<p>Customize the type of climate change data to output (minimum, maximum, or average climate change values) with the outputType parameter. Specify the output period for the data (the season or year) with the outputPeriod parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>An output port that broadcasts the file name of the raster file created by the actor. The actor creates this file from the IPCC source data, based on the time and type values specified by the user.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:input">
<configure>An input port that accepts the file name of the source IPCC climate change dataset. IPCC data can be located via the EcoGrid.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:nodatavalueParameter">
<configure>The value used to indicate missing data.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputPeriod">
<configure>The time period to output: annual, fall, winter, summer, or spring.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:colsParameter">
<configure>The number of columns in the data file. The number of columns is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:rowsParameter">
<configure>The number of rows in the data file. The number of rows is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:baseOutputFileName">
<configure>The base file path for the raster file, which the actor creates and saves. If no path is specified, the file is placed in the same directory as the source IPCC file. In either case, the actor appends text indicating the type and time period of the data to the file name.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputType">
<configure>The type of climate change data to output: minimum, maximum, or average climate change values. The selected type will be output for the selected time period, which is specified with the outputPeriod parameter.</configure>
</property>
</property>
</entity>
    <entity class="util.ClimateChangeFileProcessor" name="ClimateChangeFileProcessor3">
        <property class="ptolemy.data.expr.StringParameter" name="outputType" value="average">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="outputPeriod" value="annual">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="rowsParameter" value="numRows">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="colsParameter" value="numCols">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="nodatavalueParameter" value="9999">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="baseOutputFileName" value="OutputDir+&quot;/CGCM_ A2a_Model_2020_Mean_Temperature&quot;">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:localhost:local:LOCALID0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[135.0, 465.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>dan higgins</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The ClimateChangeFileProcessor actor converts climate change data from the Intergovernmental Panel on Climate Change (IPCC) into a more generalized raster format that can be read by other actors. The actor outputs the name of the converted file.</p>

<p>The ClimateChangeFileProcessor actor is very similar to the ClimateFileProcessor actor, except that it is designed to work with predicted climate change datasets, which differ from historical (1961-1990) IPCC datasets in formatting. For more information about IPCC, see http://www.ipcc.ch/.</p>

<p>The ClimateChangeFileProcessor actor receives the name of an IPCC climate change data file via its input port and saves the reformatted file in the same directory. Specify another location using the baseOutputFileName parameter.</p>

<p>Customize the type of climate change data to output (minimum, maximum, or average climate change values) with the outputType parameter. Specify the output period for the data (the season or year) with the outputPeriod parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>An output port that broadcasts the file name of the raster file created by the actor. The actor creates this file from the IPCC source data, based on the time and type values specified by the user.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:input">
<configure>An input port that accepts the file name of the source IPCC climate change dataset. IPCC data can be located via the EcoGrid.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:nodatavalueParameter">
<configure>The value used to indicate missing data.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputPeriod">
<configure>The time period to output: annual, fall, winter, summer, or spring.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:colsParameter">
<configure>The number of columns in the data file. The number of columns is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:rowsParameter">
<configure>The number of rows in the data file. The number of rows is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:baseOutputFileName">
<configure>The base file path for the raster file, which the actor creates and saves. If no path is specified, the file is placed in the same directory as the source IPCC file. In either case, the actor appends text indicating the type and time period of the data to the file name.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputType">
<configure>The type of climate change data to output: minimum, maximum, or average climate change values. The selected type will be output for the selected time period, which is specified with the outputPeriod parameter.</configure>
</property>
</property>
</entity>
    <entity class="util.ClimateChangeFileProcessor" name="ClimateChangeFileProcessor4">
        <property class="ptolemy.data.expr.StringParameter" name="outputType" value="average">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="outputPeriod" value="annual">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="rowsParameter" value="numRows">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="colsParameter" value="numCols">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="nodatavalueParameter" value="9999">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="baseOutputFileName" value="OutputDir+&quot;/CGCM1_A2a_Model_2020_Minimum_Temperature&quot;">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:localhost:local:LOCALID0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[125.0, 585.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>dan higgins</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The ClimateChangeFileProcessor actor converts climate change data from the Intergovernmental Panel on Climate Change (IPCC) into a more generalized raster format that can be read by other actors. The actor outputs the name of the converted file.</p>

<p>The ClimateChangeFileProcessor actor is very similar to the ClimateFileProcessor actor, except that it is designed to work with predicted climate change datasets, which differ from historical (1961-1990) IPCC datasets in formatting. For more information about IPCC, see http://www.ipcc.ch/.</p>

<p>The ClimateChangeFileProcessor actor receives the name of an IPCC climate change data file via its input port and saves the reformatted file in the same directory. Specify another location using the baseOutputFileName parameter.</p>

<p>Customize the type of climate change data to output (minimum, maximum, or average climate change values) with the outputType parameter. Specify the output period for the data (the season or year) with the outputPeriod parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>An output port that broadcasts the file name of the raster file created by the actor. The actor creates this file from the IPCC source data, based on the time and type values specified by the user.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:input">
<configure>An input port that accepts the file name of the source IPCC climate change dataset. IPCC data can be located via the EcoGrid.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:nodatavalueParameter">
<configure>The value used to indicate missing data.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputPeriod">
<configure>The time period to output: annual, fall, winter, summer, or spring.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:colsParameter">
<configure>The number of columns in the data file. The number of columns is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:rowsParameter">
<configure>The number of rows in the data file. The number of rows is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:baseOutputFileName">
<configure>The base file path for the raster file, which the actor creates and saves. If no path is specified, the file is placed in the same directory as the source IPCC file. In either case, the actor appends text indicating the type and time period of the data to the file name.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputType">
<configure>The type of climate change data to output: minimum, maximum, or average climate change values. The selected type will be output for the selected time period, which is specified with the outputPeriod parameter.</configure>
</property>
</property>
</entity>
    <entity class="util.ClimateChangeFileProcessor" name="ClimateChangeFileProcessor5">
        <property class="ptolemy.data.expr.StringParameter" name="outputType" value="average">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="outputPeriod" value="annual">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="rowsParameter" value="numRows">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="colsParameter" value="numCols">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="nodatavalueParameter" value="9999">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="baseOutputFileName" value="OutputDir+&quot;/CGCM1_A2a_Model_2020_Precipitation&quot;">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:localhost:local:LOCALID0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[125.0, 715.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>dan higgins</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The ClimateChangeFileProcessor actor converts climate change data from the Intergovernmental Panel on Climate Change (IPCC) into a more generalized raster format that can be read by other actors. The actor outputs the name of the converted file.</p>

<p>The ClimateChangeFileProcessor actor is very similar to the ClimateFileProcessor actor, except that it is designed to work with predicted climate change datasets, which differ from historical (1961-1990) IPCC datasets in formatting. For more information about IPCC, see http://www.ipcc.ch/.</p>

<p>The ClimateChangeFileProcessor actor receives the name of an IPCC climate change data file via its input port and saves the reformatted file in the same directory. Specify another location using the baseOutputFileName parameter.</p>

<p>Customize the type of climate change data to output (minimum, maximum, or average climate change values) with the outputType parameter. Specify the output period for the data (the season or year) with the outputPeriod parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>An output port that broadcasts the file name of the raster file created by the actor. The actor creates this file from the IPCC source data, based on the time and type values specified by the user.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:input">
<configure>An input port that accepts the file name of the source IPCC climate change dataset. IPCC data can be located via the EcoGrid.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:nodatavalueParameter">
<configure>The value used to indicate missing data.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputPeriod">
<configure>The time period to output: annual, fall, winter, summer, or spring.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:colsParameter">
<configure>The number of columns in the data file. The number of columns is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:rowsParameter">
<configure>The number of rows in the data file. The number of rows is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:baseOutputFileName">
<configure>The base file path for the raster file, which the actor creates and saves. If no path is specified, the file is placed in the same directory as the source IPCC file. In either case, the actor appends text indicating the type and time period of the data to the file name.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputType">
<configure>The type of climate change data to output: minimum, maximum, or average climate change values. The selected type will be output for the selected time period, which is specified with the outputPeriod parameter.</configure>
</property>
</property>
</entity>
    <entity class="util.ClimateChangeFileProcessor" name="ClimateChangeFileProcessor6">
        <property class="ptolemy.data.expr.StringParameter" name="outputType" value="average">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="outputPeriod" value="annual">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="rowsParameter" value="numRows">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="colsParameter" value="numCols">
        </property>
        <property class="ptolemy.data.expr.StringParameter" name="nodatavalueParameter" value="9999">
        </property>
        <property class="ptolemy.data.expr.Parameter" name="baseOutputFileName" value="OutputDir+&quot;/CGCM1_A2a_Model_2020_Wind_Speed&quot;">
        </property>
        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:localhost:local:LOCALID0">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[120.0, 830.0]">
        </property>
    <property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>dan higgins</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The ClimateChangeFileProcessor actor converts climate change data from the Intergovernmental Panel on Climate Change (IPCC) into a more generalized raster format that can be read by other actors. The actor outputs the name of the converted file.</p>

<p>The ClimateChangeFileProcessor actor is very similar to the ClimateFileProcessor actor, except that it is designed to work with predicted climate change datasets, which differ from historical (1961-1990) IPCC datasets in formatting. For more information about IPCC, see http://www.ipcc.ch/.</p>

<p>The ClimateChangeFileProcessor actor receives the name of an IPCC climate change data file via its input port and saves the reformatted file in the same directory. Specify another location using the baseOutputFileName parameter.</p>

<p>Customize the type of climate change data to output (minimum, maximum, or average climate change values) with the outputType parameter. Specify the output period for the data (the season or year) with the outputPeriod parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:output">
<configure>An output port that broadcasts the file name of the raster file created by the actor. The actor creates this file from the IPCC source data, based on the time and type values specified by the user.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:input">
<configure>An input port that accepts the file name of the source IPCC climate change dataset. IPCC data can be located via the EcoGrid.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:nodatavalueParameter">
<configure>The value used to indicate missing data.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputPeriod">
<configure>The time period to output: annual, fall, winter, summer, or spring.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:colsParameter">
<configure>The number of columns in the data file. The number of columns is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:rowsParameter">
<configure>The number of rows in the data file. The number of rows is specified in the IPCC data source metadata. To view the metadata, right-click the IPCC dataset and select Get Metadata.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:baseOutputFileName">
<configure>The base file path for the raster file, which the actor creates and saves. If no path is specified, the file is placed in the same directory as the source IPCC file. In either case, the actor appends text indicating the type and time period of the data to the file name.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:outputType">
<configure>The type of climate change data to output: minimum, maximum, or average climate change values. The selected type will be output for the selected time period, which is specified with the outputPeriod parameter.</configure>
</property>
</property>
</entity>
    <entity class="org.resurgence.actor.DirectoryMaker" name="Directory Maker">
        <property class="ptolemy.data.expr.StringParameter" name="Directory name" value="$OutputDir">
        </property>
<property class="ptolemy.vergil.basic.KeplerDocumentationAttribute" name="KeplerDocumentation">
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="description">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="author">
<configure>Wibke Sudholt</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="version">
<configure>null</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="userLevelDocumentation">
<configure>
<p>The DirectoryMaker actor creates a new local directory and outputs its path.</p>

<p>The name of the new directory is specified with the directoryName parameter.</p>
</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:trigger">
<configure>A multiport that has no declared type (in other words, the port can accept any data type: double, int, array, etc.) If the port is connected, the actor will not fire until the trigger port receives an input token. Connecting the port is optional, but useful when scheduling the actor to perform at a certain time.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="port:path">
<configure>An output port that broadcasts the new directory path.</configure>
</property>
<property class="ptolemy.kernel.util.ConfigurableAttribute" name="prop:Directory name">
<configure>The name and path of the new directory. See FileParameter for more information about specifying paths.</configure>
</property>
</property>        <property class="org.kepler.moml.NamedObjId" name="entityId" value="urn:lsid:kepler-project.org:actor:286:1">
        </property>
        <property class="ptolemy.kernel.util.StringAttribute" name="class" value="org.resurgence.actor.DirectoryMaker">
            <property class="ptolemy.kernel.util.StringAttribute" name="id" value="urn:lsid:kepler-project.org:class:1111:1">
            </property>
        </property>
        <property class="org.kepler.sms.SemanticType" name="semanticType00" value="urn:lsid:localhost:onto:1:1#FileSystemActor">
        </property>
        <property class="org.kepler.sms.SemanticType" name="semanticType11" value="urn:lsid:localhost:onto:2:1#FileSystem">
        </property>
        <property class="ptolemy.kernel.util.Location" name="_location" value="[-40.0, 70.0]">
        </property>
    </entity>
    <relation class="ptolemy.actor.TypedIORelation" name="relation">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
    </relation>
    <relation class="ptolemy.actor.TypedIORelation" name="relation2">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
    </relation>
    <relation class="ptolemy.actor.TypedIORelation" name="relation3">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
    </relation>
    <relation class="ptolemy.actor.TypedIORelation" name="relation4">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
    </relation>
    <relation class="ptolemy.actor.TypedIORelation" name="relation5">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
    </relation>
    <relation class="ptolemy.actor.TypedIORelation" name="relation6">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
    </relation>
    <relation class="ptolemy.actor.TypedIORelation" name="relation7">
        <property class="ptolemy.data.expr.Parameter" name="width" value="1">
        </property>
        <vertex name="vertex1" value="[-35.0, 200.0]">
        </vertex>
    </relation>
    <link port="IPCC Climate Change Data:  CGCM1 A2a Model: 2020 Radiation.trigger" relation="relation7"/>
    <link port="IPCC Climate Change Data:  CGCM1 A2a Model: 2020 Radiation.CacheLocalFileName" relation="relation"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Maximum Temperature.trigger" relation="relation7"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Maximum Temperature.CacheLocalFileName" relation="relation2"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Mean Temperature.trigger" relation="relation7"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Mean Temperature.CacheLocalFileName" relation="relation3"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Minimum Temperature.trigger" relation="relation7"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Minimum Temperature.CacheLocalFileName" relation="relation4"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Precipitation.trigger" relation="relation7"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Precipitation.CacheLocalFileName" relation="relation5"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Wind Speed.trigger" relation="relation7"/>
    <link port="IPCC Climate Change Data: CGCM1 A2a Model: 2020 Wind Speed.CacheLocalFileName" relation="relation6"/>
    <link port="ClimateChangeFileProcessor.input" relation="relation"/>
    <link port="ClimateChangeFileProcessor2.input" relation="relation2"/>
    <link port="ClimateChangeFileProcessor3.input" relation="relation3"/>
    <link port="ClimateChangeFileProcessor4.input" relation="relation4"/>
    <link port="ClimateChangeFileProcessor5.input" relation="relation5"/>
    <link port="ClimateChangeFileProcessor6.input" relation="relation6"/>
    <link port="Directory Maker.path" relation="relation7"/>
</entity>
